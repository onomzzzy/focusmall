{"version":3,"sources":["C:/Users/O N O M E/Desktop/Angular Project/MALL/node_modules/primeng/fesm2015/primeng-checkbox.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wFA0FE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2CAgDyC,AAqB9B;;;;EAEX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAOiB","file":"primeng-checkbox.js","sourcesContent":["import { forwardRef, EventEmitter, ChangeDetectorRef, Input, Output, Component, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst CHECKBOX_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => Checkbox),\n    multi: true\n};\nlet Checkbox = class Checkbox {\n    constructor(cd) {\n        this.cd = cd;\n        this.checkboxIcon = 'pi pi-check';\n        this.onChange = new EventEmitter();\n        this.onModelChange = () => { };\n        this.onModelTouched = () => { };\n        this.focused = false;\n        this.checked = false;\n    }\n    onClick(event, checkbox, focus) {\n        event.preventDefault();\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        this.checked = !this.checked;\n        this.updateModel();\n        if (focus) {\n            checkbox.focus();\n        }\n    }\n    updateModel() {\n        if (!this.binary) {\n            if (this.checked)\n                this.addValue();\n            else\n                this.removeValue();\n            this.onModelChange(this.model);\n            if (this.formControl) {\n                this.formControl.setValue(this.model);\n            }\n        }\n        else {\n            this.onModelChange(this.checked);\n        }\n        this.onChange.emit(this.checked);\n    }\n    handleChange(event) {\n        if (!this.readonly) {\n            this.checked = event.target.checked;\n            this.updateModel();\n        }\n    }\n    isChecked() {\n        if (this.binary)\n            return this.model;\n        else\n            return this.model && this.model.indexOf(this.value) > -1;\n    }\n    removeValue() {\n        this.model = this.model.filter(val => val !== this.value);\n    }\n    addValue() {\n        if (this.model)\n            this.model = [...this.model, this.value];\n        else\n            this.model = [this.value];\n    }\n    onFocus(event) {\n        this.focused = true;\n    }\n    onBlur(event) {\n        this.focused = false;\n        this.onModelTouched();\n    }\n    writeValue(model) {\n        this.model = model;\n        this.checked = this.isChecked();\n        this.cd.markForCheck();\n    }\n    registerOnChange(fn) {\n        this.onModelChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onModelTouched = fn;\n    }\n    setDisabledState(val) {\n        this.disabled = val;\n    }\n};\nCheckbox.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\n__decorate([\n    Input()\n], Checkbox.prototype, \"value\", void 0);\n__decorate([\n    Input()\n], Checkbox.prototype, \"name\", void 0);\n__decorate([\n    Input()\n], Checkbox.prototype, \"disabled\", void 0);\n__decorate([\n    Input()\n], Checkbox.prototype, \"binary\", void 0);\n__decorate([\n    Input()\n], Checkbox.prototype, \"label\", void 0);\n__decorate([\n    Input()\n], Checkbox.prototype, \"ariaLabelledBy\", void 0);\n__decorate([\n    Input()\n], Checkbox.prototype, \"tabindex\", void 0);\n__decorate([\n    Input()\n], Checkbox.prototype, \"inputId\", void 0);\n__decorate([\n    Input()\n], Checkbox.prototype, \"style\", void 0);\n__decorate([\n    Input()\n], Checkbox.prototype, \"styleClass\", void 0);\n__decorate([\n    Input()\n], Checkbox.prototype, \"labelStyleClass\", void 0);\n__decorate([\n    Input()\n], Checkbox.prototype, \"formControl\", void 0);\n__decorate([\n    Input()\n], Checkbox.prototype, \"checkboxIcon\", void 0);\n__decorate([\n    Input()\n], Checkbox.prototype, \"readonly\", void 0);\n__decorate([\n    Output()\n], Checkbox.prototype, \"onChange\", void 0);\nCheckbox = __decorate([\n    Component({\n        selector: 'p-checkbox',\n        template: `\n        <div [ngStyle]=\"style\" [ngClass]=\"{'ui-chkbox ui-widget': true,'ui-chkbox-readonly': readonly}\" [class]=\"styleClass\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #cb type=\"checkbox\" [attr.id]=\"inputId\" [name]=\"name\" [readonly]=\"readonly\" [value]=\"value\" [checked]=\"checked\" (focus)=\"onFocus($event)\" (blur)=\"onBlur($event)\"\n                [ngClass]=\"{'ui-state-focus':focused}\" (change)=\"handleChange($event)\" [disabled]=\"disabled\" [attr.tabindex]=\"tabindex\" [attr.aria-labelledby]=\"ariaLabelledBy\">\n            </div>\n            <div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\" (click)=\"onClick($event,cb,true)\"\n                        [ngClass]=\"{'ui-state-active':checked,'ui-state-disabled':disabled,'ui-state-focus':focused}\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"checked ? checkboxIcon : null\"></span>\n            </div>\n        </div>\n        <label (click)=\"onClick($event,cb,true)\" [class]=\"labelStyleClass\"\n                [ngClass]=\"{'ui-chkbox-label': true, 'ui-label-active':checked, 'ui-label-disabled':disabled, 'ui-label-focus':focused}\"\n                *ngIf=\"label\" [attr.for]=\"inputId\">{{label}}</label>\n    `,\n        providers: [CHECKBOX_VALUE_ACCESSOR]\n    })\n], Checkbox);\nlet CheckboxModule = class CheckboxModule {\n};\nCheckboxModule = __decorate([\n    NgModule({\n        imports: [CommonModule],\n        exports: [Checkbox],\n        declarations: [Checkbox]\n    })\n], CheckboxModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CHECKBOX_VALUE_ACCESSOR, Checkbox, CheckboxModule };\n"]}