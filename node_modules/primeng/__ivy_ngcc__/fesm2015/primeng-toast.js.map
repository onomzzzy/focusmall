{"version":3,"sources":["C:/Users/O N O M E/Desktop/Angular Project/MALL/node_modules/primeng/fesm2015/primeng-toast.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eA8CE;;;;;;;;;;;;;;;;;;;;;sDAqBoD,AA4CxC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eA0FZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yCAuCuC,AA0B/B;;;;;EAER;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAOc","file":"primeng-toast.js","sourcesContent":["import { EventEmitter, Input, Output, ViewChild, Component, ContentChildren, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DomHandler } from 'primeng/dom';\nimport { MessageService, PrimeTemplate, SharedModule } from 'primeng/api';\nimport { trigger, state, style, transition, animate, query, animateChild } from '@angular/animations';\n\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet ToastItem = class ToastItem {\n    constructor() {\n        this.onClose = new EventEmitter();\n    }\n    ngAfterViewInit() {\n        this.initTimeout();\n    }\n    initTimeout() {\n        if (!this.message.sticky) {\n            this.timeout = setTimeout(() => {\n                this.onClose.emit({\n                    index: this.index,\n                    message: this.message\n                });\n            }, this.message.life || 3000);\n        }\n    }\n    clearTimeout() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n            this.timeout = null;\n        }\n    }\n    onMouseEnter() {\n        this.clearTimeout();\n    }\n    onMouseLeave() {\n        this.initTimeout();\n    }\n    onCloseIconClick(event) {\n        this.clearTimeout();\n        this.onClose.emit({\n            index: this.index,\n            message: this.message\n        });\n        event.preventDefault();\n    }\n    ngOnDestroy() {\n        this.clearTimeout();\n    }\n};\n__decorate([\n    Input()\n], ToastItem.prototype, \"message\", void 0);\n__decorate([\n    Input()\n], ToastItem.prototype, \"index\", void 0);\n__decorate([\n    Input()\n], ToastItem.prototype, \"template\", void 0);\n__decorate([\n    Input()\n], ToastItem.prototype, \"showTransitionOptions\", void 0);\n__decorate([\n    Input()\n], ToastItem.prototype, \"hideTransitionOptions\", void 0);\n__decorate([\n    Output()\n], ToastItem.prototype, \"onClose\", void 0);\n__decorate([\n    ViewChild('container', { static: true })\n], ToastItem.prototype, \"containerViewChild\", void 0);\nToastItem = __decorate([\n    Component({\n        selector: 'p-toastItem',\n        template: `\n        <div #container class=\"ui-toast-message ui-shadow\" [@messageState]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\"\n            [ngClass]=\"{'ui-toast-message-info': message.severity == 'info','ui-toast-message-warn': message.severity == 'warn',\n                'ui-toast-message-error': message.severity == 'error','ui-toast-message-success': message.severity == 'success'}\"\n                (mouseenter)=\"onMouseEnter()\" (mouseleave)=\"onMouseLeave()\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">\n            <div class=\"ui-toast-message-content\">\n                <a tabindex=\"0\" class=\"ui-toast-close-icon pi pi-times\" (click)=\"onCloseIconClick($event)\" (keydown.enter)=\"onCloseIconClick($event)\" *ngIf=\"message.closable !== false\"></a>\n                <ng-container *ngIf=\"!template\">\n                    <span class=\"ui-toast-icon pi\"\n                        [ngClass]=\"{'pi-info-circle': message.severity == 'info', 'pi-exclamation-triangle': message.severity == 'warn',\n                            'pi-times': message.severity == 'error', 'pi-check' :message.severity == 'success'}\"></span>\n                    <div class=\"ui-toast-message-text-content\">\n                        <div class=\"ui-toast-summary\">{{message.summary}}</div>\n                        <div class=\"ui-toast-detail\">{{message.detail}}</div>\n                    </div>\n                </ng-container>\n                <ng-container *ngTemplateOutlet=\"template; context: {$implicit: message}\"></ng-container>\n            </div>\n        </div>\n    `,\n        animations: [\n            trigger('messageState', [\n                state('visible', style({\n                    transform: 'translateY(0)',\n                    opacity: 1\n                })),\n                transition('void => *', [\n                    style({ transform: 'translateY(100%)', opacity: 0 }),\n                    animate('{{showTransitionParams}}')\n                ]),\n                transition('* => void', [\n                    animate(('{{hideTransitionParams}}'), style({\n                        height: 0,\n                        opacity: 0,\n                        transform: 'translateY(-100%)'\n                    }))\n                ])\n            ])\n        ]\n    })\n], ToastItem);\nlet Toast = class Toast {\n    constructor(messageService) {\n        this.messageService = messageService;\n        this.autoZIndex = true;\n        this.baseZIndex = 0;\n        this.position = 'top-right';\n        this.showTransitionOptions = '300ms ease-out';\n        this.hideTransitionOptions = '250ms ease-in';\n        this.onClose = new EventEmitter();\n    }\n    ngOnInit() {\n        this.messageSubscription = this.messageService.messageObserver.subscribe(messages => {\n            if (messages) {\n                if (messages instanceof Array) {\n                    let filteredMessages = messages.filter(m => this.key === m.key);\n                    this.messages = this.messages ? [...this.messages, ...filteredMessages] : [...filteredMessages];\n                }\n                else if (this.key === messages.key) {\n                    this.messages = this.messages ? [...this.messages, ...[messages]] : [messages];\n                }\n                if (this.modal && this.messages && this.messages.length) {\n                    this.enableModality();\n                }\n            }\n        });\n        this.clearSubscription = this.messageService.clearObserver.subscribe(key => {\n            if (key) {\n                if (this.key === key) {\n                    this.messages = null;\n                }\n            }\n            else {\n                this.messages = null;\n            }\n            if (this.modal) {\n                this.disableModality();\n            }\n        });\n    }\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'message':\n                    this.template = item.template;\n                    break;\n                default:\n                    this.template = item.template;\n                    break;\n            }\n        });\n    }\n    onMessageClose(event) {\n        this.messages.splice(event.index, 1);\n        if (this.messages.length === 0) {\n            this.disableModality();\n        }\n        this.onClose.emit({\n            message: event.message\n        });\n    }\n    enableModality() {\n        if (!this.mask) {\n            this.mask = document.createElement('div');\n            this.mask.style.zIndex = String(parseInt(this.containerViewChild.nativeElement.style.zIndex) - 1);\n            let maskStyleClass = 'ui-widget-overlay ui-dialog-mask';\n            DomHandler.addMultipleClasses(this.mask, maskStyleClass);\n            document.body.appendChild(this.mask);\n        }\n    }\n    disableModality() {\n        if (this.mask) {\n            document.body.removeChild(this.mask);\n            this.mask = null;\n        }\n    }\n    onAnimationStart(event) {\n        if (event.fromState === 'void' && this.autoZIndex) {\n            this.containerViewChild.nativeElement.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n        }\n    }\n    ngOnDestroy() {\n        if (this.messageSubscription) {\n            this.messageSubscription.unsubscribe();\n        }\n        if (this.clearSubscription) {\n            this.clearSubscription.unsubscribe();\n        }\n        this.disableModality();\n    }\n};\nToast.ctorParameters = () => [\n    { type: MessageService }\n];\n__decorate([\n    Input()\n], Toast.prototype, \"key\", void 0);\n__decorate([\n    Input()\n], Toast.prototype, \"autoZIndex\", void 0);\n__decorate([\n    Input()\n], Toast.prototype, \"baseZIndex\", void 0);\n__decorate([\n    Input()\n], Toast.prototype, \"style\", void 0);\n__decorate([\n    Input()\n], Toast.prototype, \"styleClass\", void 0);\n__decorate([\n    Input()\n], Toast.prototype, \"position\", void 0);\n__decorate([\n    Input()\n], Toast.prototype, \"modal\", void 0);\n__decorate([\n    Input()\n], Toast.prototype, \"showTransitionOptions\", void 0);\n__decorate([\n    Input()\n], Toast.prototype, \"hideTransitionOptions\", void 0);\n__decorate([\n    Output()\n], Toast.prototype, \"onClose\", void 0);\n__decorate([\n    ViewChild('container', { static: true })\n], Toast.prototype, \"containerViewChild\", void 0);\n__decorate([\n    ContentChildren(PrimeTemplate)\n], Toast.prototype, \"templates\", void 0);\nToast = __decorate([\n    Component({\n        selector: 'p-toast',\n        template: `\n        <div #container [ngClass]=\"{'ui-toast ui-widget': true, \n                'ui-toast-top-right': position === 'top-right',\n                'ui-toast-top-left': position === 'top-left',\n                'ui-toast-bottom-right': position === 'bottom-right',\n                'ui-toast-bottom-left': position === 'bottom-left',\n                'ui-toast-top-center': position === 'top-center',\n                'ui-toast-bottom-center': position === 'bottom-center',\n                'ui-toast-center': position === 'center'}\" \n                [ngStyle]=\"style\" [class]=\"styleClass\">\n            <p-toastItem *ngFor=\"let msg of messages; let i=index\" [message]=\"msg\" [index]=\"i\" (onClose)=\"onMessageClose($event)\"\n                    [template]=\"template\" @toastAnimation (@toastAnimation.start)=\"onAnimationStart($event)\" [showTransitionOptions]=\"showTransitionOptions\" [hideTransitionOptions]=\"hideTransitionOptions\"></p-toastItem>\n        </div>\n    `,\n        animations: [\n            trigger('toastAnimation', [\n                transition(':enter, :leave', [\n                    query('@*', animateChild())\n                ])\n            ])\n        ]\n    })\n], Toast);\nlet ToastModule = class ToastModule {\n};\nToastModule = __decorate([\n    NgModule({\n        imports: [CommonModule],\n        exports: [Toast, SharedModule],\n        declarations: [Toast, ToastItem]\n    })\n], ToastModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Toast, ToastItem, ToastModule };\n"]}