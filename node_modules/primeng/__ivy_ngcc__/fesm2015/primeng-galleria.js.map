{"version":3,"sources":["C:/Users/O N O M E/Desktop/Angular Project/MALL/node_modules/primeng/fesm2015/primeng-galleria.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wGAyIE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCAgDqC,AA+B1B;;;;EAEX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAOiB","file":"primeng-galleria.js","sourcesContent":["import { EventEmitter, ElementRef, Input, Output, Component, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DomHandler } from 'primeng/dom';\n\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet Galleria = class Galleria {\n    constructor(el) {\n        this.el = el;\n        this.panelWidth = 600;\n        this.panelHeight = 400;\n        this.frameWidth = 60;\n        this.frameHeight = 40;\n        this.activeIndex = 0;\n        this.showFilmstrip = true;\n        this.autoPlay = true;\n        this.transitionInterval = 4000;\n        this.showCaption = true;\n        this.effectDuration = 500;\n        this.onImageClicked = new EventEmitter();\n        this.onImageChange = new EventEmitter();\n        this.stripLeft = 0;\n    }\n    ngAfterViewChecked() {\n        if (this.imagesChanged) {\n            this.stopSlideshow();\n            this.render();\n            this.imagesChanged = false;\n        }\n    }\n    get images() {\n        return this._images;\n    }\n    set images(value) {\n        this._images = value;\n        this.imagesChanged = true;\n        if (this.initialized) {\n            this.activeIndex = 0;\n        }\n    }\n    ngAfterViewInit() {\n        this.container = this.el.nativeElement.children[0];\n        this.panelWrapper = DomHandler.findSingle(this.el.nativeElement, 'ul.ui-galleria-panel-wrapper');\n        this.initialized = true;\n        if (this.showFilmstrip) {\n            this.stripWrapper = DomHandler.findSingle(this.container, 'div.ui-galleria-filmstrip-wrapper');\n            this.strip = DomHandler.findSingle(this.stripWrapper, 'ul.ui-galleria-filmstrip');\n        }\n        if (this.images && this.images.length) {\n            this.render();\n        }\n    }\n    render() {\n        this.panels = DomHandler.find(this.panelWrapper, 'li.ui-galleria-panel');\n        if (this.showFilmstrip) {\n            this.frames = DomHandler.find(this.strip, 'li.ui-galleria-frame');\n            this.stripWrapper.style.width = DomHandler.width(this.panelWrapper) - 50 + 'px';\n            this.stripWrapper.style.height = this.frameHeight + 'px';\n        }\n        if (this.showCaption) {\n            this.caption = DomHandler.findSingle(this.container, 'div.ui-galleria-caption');\n            this.caption.style.bottom = this.showFilmstrip ? DomHandler.getOuterHeight(this.stripWrapper, true) + 'px' : 0 + 'px';\n            this.caption.style.width = DomHandler.width(this.panelWrapper) + 'px';\n        }\n        if (this.autoPlay) {\n            this.startSlideshow();\n        }\n        this.container.style.visibility = 'visible';\n    }\n    startSlideshow() {\n        this.interval = setInterval(() => {\n            this.next();\n        }, this.transitionInterval);\n        this.slideshowActive = true;\n    }\n    stopSlideshow() {\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n        this.slideshowActive = false;\n    }\n    clickNavRight() {\n        if (this.slideshowActive) {\n            this.stopSlideshow();\n        }\n        this.next();\n    }\n    clickNavLeft() {\n        if (this.slideshowActive) {\n            this.stopSlideshow();\n        }\n        this.prev();\n    }\n    frameClick(frame) {\n        if (this.slideshowActive) {\n            this.stopSlideshow();\n        }\n        this.select(DomHandler.index(frame), false);\n    }\n    prev() {\n        if (this.activeIndex !== 0) {\n            this.select(this.activeIndex - 1, true);\n        }\n    }\n    next() {\n        if (this.activeIndex !== (this.panels.length - 1)) {\n            this.select(this.activeIndex + 1, true);\n        }\n        else {\n            this.select(0, false);\n            this.stripLeft = 0;\n        }\n    }\n    select(index, reposition) {\n        if (index !== this.activeIndex) {\n            let oldPanel = this.panels[this.activeIndex], newPanel = this.panels[index];\n            DomHandler.fadeIn(newPanel, this.effectDuration);\n            if (this.showFilmstrip) {\n                let oldFrame = this.frames[this.activeIndex], newFrame = this.frames[index];\n                if (reposition === undefined || reposition === true) {\n                    let frameLeft = newFrame.offsetLeft, stepFactor = this.frameWidth + parseInt(getComputedStyle(newFrame)['margin-right'], 10), stripLeft = this.strip.offsetLeft, frameViewportLeft = frameLeft + stripLeft, frameViewportRight = frameViewportLeft + this.frameWidth;\n                    if (frameViewportRight > DomHandler.width(this.stripWrapper))\n                        this.stripLeft -= stepFactor;\n                    else if (frameViewportLeft < 0)\n                        this.stripLeft += stepFactor;\n                }\n            }\n            this.activeIndex = index;\n            this.onImageChange.emit({ index: index });\n        }\n    }\n    clickImage(event, image, i) {\n        this.onImageClicked.emit({ originalEvent: event, image: image, index: i });\n    }\n    ngOnDestroy() {\n        this.stopSlideshow();\n    }\n};\nGalleria.ctorParameters = () => [\n    { type: ElementRef }\n];\n__decorate([\n    Input()\n], Galleria.prototype, \"style\", void 0);\n__decorate([\n    Input()\n], Galleria.prototype, \"styleClass\", void 0);\n__decorate([\n    Input()\n], Galleria.prototype, \"panelWidth\", void 0);\n__decorate([\n    Input()\n], Galleria.prototype, \"panelHeight\", void 0);\n__decorate([\n    Input()\n], Galleria.prototype, \"frameWidth\", void 0);\n__decorate([\n    Input()\n], Galleria.prototype, \"frameHeight\", void 0);\n__decorate([\n    Input()\n], Galleria.prototype, \"activeIndex\", void 0);\n__decorate([\n    Input()\n], Galleria.prototype, \"showFilmstrip\", void 0);\n__decorate([\n    Input()\n], Galleria.prototype, \"autoPlay\", void 0);\n__decorate([\n    Input()\n], Galleria.prototype, \"transitionInterval\", void 0);\n__decorate([\n    Input()\n], Galleria.prototype, \"showCaption\", void 0);\n__decorate([\n    Input()\n], Galleria.prototype, \"effectDuration\", void 0);\n__decorate([\n    Output()\n], Galleria.prototype, \"onImageClicked\", void 0);\n__decorate([\n    Output()\n], Galleria.prototype, \"onImageChange\", void 0);\n__decorate([\n    Input()\n], Galleria.prototype, \"images\", null);\nGalleria = __decorate([\n    Component({\n        selector: 'p-galleria',\n        template: `\n        <div [ngClass]=\"{'ui-galleria ui-widget ui-widget-content ui-corner-all':true}\" [ngStyle]=\"style\" [class]=\"styleClass\" [style.width.px]=\"panelWidth\">\n            <ul class=\"ui-galleria-panel-wrapper\" [style.width.px]=\"panelWidth\" [style.height.px]=\"panelHeight\">\n                <li *ngFor=\"let image of images;let i=index\" class=\"ui-galleria-panel\" [ngClass]=\"{'ui-helper-hidden':i!=activeIndex}\"\n                    [style.width.px]=\"panelWidth\" [style.height.px]=\"panelHeight\" (click)=\"clickImage($event,image,i)\">\n                    <img class=\"ui-panel-images\" [src]=\"image.source\" [alt]=\"image.alt\" [title]=\"image.title\"/>\n                </li>\n            </ul>\n            <div [ngClass]=\"{'ui-galleria-filmstrip-wrapper':true}\" *ngIf=\"showFilmstrip\">\n                <ul class=\"ui-galleria-filmstrip\" style=\"transition:left 1s\" [style.left.px]=\"stripLeft\">\n                    <li #frame *ngFor=\"let image of images;let i=index\" [ngClass]=\"{'ui-galleria-frame-active':i==activeIndex}\" class=\"ui-galleria-frame\" (click)=\"frameClick(frame)\"\n                        [style.width.px]=\"frameWidth\" [style.height.px]=\"frameHeight\" [style.transition]=\"'opacity 0.75s ease'\">\n                        <div class=\"ui-galleria-frame-content\">\n                            <img [src]=\"image.source\" [alt]=\"image.alt\" [title]=\"image.title\" class=\"ui-galleria-frame-image\"\n                                [style.width.px]=\"frameWidth\" [style.height.px]=\"frameHeight\">\n                        </div>\n                    </li>\n                </ul>\n            </div>\n            <div class=\"ui-galleria-nav-prev pi pi-fw pi-chevron-left\" (click)=\"clickNavLeft()\" [style.bottom.px]=\"frameHeight/2\" *ngIf=\"activeIndex !== 0\"></div>\n            <div class=\"ui-galleria-nav-next pi pi-fw pi-chevron-right\" (click)=\"clickNavRight()\" [style.bottom.px]=\"frameHeight/2\"></div>\n            <div class=\"ui-galleria-caption\" *ngIf=\"showCaption&&images\" style=\"display:block\">\n                <h4>{{images[activeIndex]?.title}}</h4><p>{{images[activeIndex]?.alt}}</p>\n            </div>\n        </div>\n    `\n    })\n], Galleria);\nlet GalleriaModule = class GalleriaModule {\n};\nGalleriaModule = __decorate([\n    NgModule({\n        imports: [CommonModule],\n        exports: [Galleria],\n        declarations: [Galleria]\n    })\n], GalleriaModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Galleria, GalleriaModule };\n"]}